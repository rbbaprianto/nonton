name: Deploy Nonton

on:
  push:
    branches: [main]

env:
  APP_NAME: "nonton"
  PRIMARY_REGION: "sin"

jobs:
  cleanup:
    runs-on: ubuntu-24.04
    permissions:
      actions: write
    steps:
      - uses: actions/github-script@v7
        with:
          script: |
            const { data: runs } = await github.rest.actions.listWorkflowRunsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: context.workflow,
              per_page: 100
            });

            const currentRunId = context.runId;
            const sortedRuns = runs.workflow_runs.sort((a, b) => b.id - a.id);
            const runsToDelete = sortedRuns.slice(1);

            for (const run of runsToDelete) {
              if (run.id !== currentRunId && run.status !== 'in_progress') {
                await github.rest.actions.deleteWorkflowRun({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  run_id: run.id
                });
              }
            }
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}

  deploy:
    needs: cleanup
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4

      - name: Setup Fly CLI
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Create App
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        run: |
          if ! flyctl apps list | grep -q "${{ env.APP_NAME }}"; then
            flyctl apps create ${{ env.APP_NAME }} --org personal
            echo "‚úÖ App created"
          else
            echo "‚ÑπÔ∏è App already exists"
          fi
          echo "app = \"${{ env.APP_NAME}}\"" > fly.toml
          echo "primary_region = \"${{ env.PRIMARY_REGION}}\"" >> fly.toml

      - name: Generate and Store Secrets
        env:
          PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          if [ -z "${{ secrets.ENCRYPTION_PASSWORD }}" ]; then
            PASSWORD=$(openssl rand -hex 16)
            
            # Dapatkan public key repo
            PUBLIC_KEY_JSON=$(curl -s -H "Authorization: token $PAT_TOKEN" \
              https://api.github.com/repos/$GITHUB_REPOSITORY/actions/secrets/public-key)
            PUBLIC_KEY=$(echo "$PUBLIC_KEY_JSON" | jq -r '.key')
            KEY_ID=$(echo "$PUBLIC_KEY_JSON" | jq -r '.key_id')
            
            # Enkripsi password
            ENCRYPTED_VALUE=$(echo -n "$PASSWORD" | openssl rsautl -encrypt -pubin -inkey <(echo "$PUBLIC_KEY" | base64 -d) | base64 -w 0)

            # Simpan secret
            curl -X PUT -H "Authorization: token $PAT_TOKEN" \
              -H "Content-Type: application/json" \
              -d "{\"encrypted_value\":\"$ENCRYPTED_VALUE\",\"key_id\":\"$KEY_ID\"}" \
              https://api.github.com/repos/$GITHUB_REPOSITORY/actions/secrets/ENCRYPTION_PASSWORD
            
            # Kirim notifikasi ke Telegram
            curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_TOKEN/sendMessage" \
              -d chat_id="$TELEGRAM_CHAT_ID" \
              -d text="üîê *New Encryption Password Generated* ||${PASSWORD}||" \
              -d parse_mode="MarkdownV2"
            
            echo "ENCRYPTION_PASSWORD=$PASSWORD" >> $GITHUB_ENV
          fi

      - name: Deploy to Fly.io
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
          ENCRYPTION_PWD: ${{ secrets.ENCRYPTION_PASSWORD }}
        run: |
          flyctl deploy --app ${{ env.APP_NAME }} \
            --build-arg ENCRYPTION_PWD="$ENCRYPTION_PWD" \
            --remote-only \
            --verbose

      - name: Send Success Notification
        if: success()
        env:
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          DEPLOY_URL="https://${{ env.APP_NAME }}.fly.dev"
          curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_TOKEN/sendMessage" \
            -d chat_id="$TELEGRAM_CHAT_ID" \
            -d text="üöÄ *Deployment Success*
‚úÖ App: ${{ env.APP_NAME }}
üåê URL: $DEPLOY_URL
üïí $(date +'%Y-%m-%d %H:%M:%S %Z')" \
            -d parse_mode="Markdown"

      - name: Send Failure Notification
        if: failure()
        env:
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          LOGS_URL="$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID"
          curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_TOKEN/sendMessage" \
            -d chat_id="$TELEGRAM_CHAT_ID" \
            -d text="‚ùå *Deployment Failed*
üîç Check logs: [GitHub Actions]($LOGS_URL)" \
            -d parse_mode="Markdown"