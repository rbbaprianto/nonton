name: Deploy nonton.fly.dev

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      action:
        description: 'Action (start)'
        required: true

env:
  APP_NAME: "nonton"
  PRIMARY_REGION: "sin"  
  ARTIFACT_NAME: "release_$(date +%Y%m%d%H%M%S).zip"

jobs:
  cleanup:
    runs-on: ubuntu-24.04
    permissions:
      actions: write
    steps:
      - uses: actions/github-script@v7
        with:
          script: |
            const { data: runs } = await github.rest.actions.listWorkflowRunsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: context.workflow,
              per_page: 100
            });
            
            const currentRunId = context.runId;
            const sortedRuns = runs.workflow_runs.sort((a, b) => b.id - a.id);
            const runsToDelete = sortedRuns.slice(1);
            
            for (const run of runsToDelete) {
              if (run.id !== currentRunId && run.status !== 'in_progress') {
                await github.rest.actions.deleteWorkflowRun({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  run_id: run.id
                });
              }
            }
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}

  deploy:
    needs: cleanup
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4

      - name: Setup Fly CLI
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Create Release Artifact
        run: |
          # Exclude sensitive files
          zip -r ${{ env.ARTIFACT_NAME }} . \
            -x *.git* \*.env* \*secrets* \*fly.toml
          echo "ARTIFACT_PATH=$(pwd)/${{ env.ARTIFACT_NAME }}" >> $GITHUB_ENV

      - name: Create App and Volume
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        run: |
          # Create app jika belum ada
          if ! flyctl apps list | grep -q "${{ env.APP_NAME }}"; then
            flyctl apps create ${{ env.APP_NAME }} --org personal
          fi

          # Create volume 10GB jika belum ada
          if ! flyctl volumes list -a ${{ env.APP_NAME }} | grep -q "film_volume"; then
            flyctl volumes create film_volume \
              --app ${{ env.APP_NAME }} \
              --size 10 \
              --region ${{ env.PRIMARY_REGION }} \
              --require-unique-zone=false \
              --yes
          fi

          # Generate fly.toml (HAPUS DUPLIKASI)
          cat <<EOF > fly.toml
          app = "${{ env.APP_NAME }}"
          primary_region = "${{ env.PRIMARY_REGION }}"

          [build]
            dockerfile = "Dockerfile"
            build_args = ["ENCRYPTION_PWD"]

          [mounts]
            source = "film_volume"
            destination = "/film"
            initial_size = "10gb"

          [http_service]
            internal_port = 80
            force_https = true
            auto_stop_machines = true
            auto_start_machines = true
            min_machines_running = 1

          [[http_service.ports]]
            handlers = ["http"]
            port = 80

          [[http_service.ports]]
            handlers = ["tls", "http"]
            port = 443
          EOF

      - name: Set Fly.io Secrets
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        run: |
          flyctl secrets set \
            TAILSCALE_AUTHKEY=${{ secrets.TAILSCALE_AUTHKEY }} \
            TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }} \
            TELEGRAM_CHAT_ID=${{ secrets.TELEGRAM_CHAT_ID }} \
            ENCRYPTION_PASSWORD=${{ secrets.ENCRYPTION_PASSWORD }} \
            JELLYFIN_API_KEY=${{ secrets.JELLYFIN_API_KEY }} \
            -a ${{ env.APP_NAME }}

      - name: Generate and Store Secrets
        env:
          PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          if [ -z "${{ secrets.ENCRYPTION_PASSWORD }}" ]; then
            PASSWORD=$(openssl rand -hex 16)
            
            PUBLIC_KEY_JSON=$(curl -s -H "Authorization: token $PAT_TOKEN" \
              https://api.github.com/repos/$GITHUB_REPOSITORY/actions/secrets/public-key)
            PUBLIC_KEY=$(echo "$PUBLIC_KEY_JSON" | jq -r '.key')
            KEY_ID=$(echo "$PUBLIC_KEY_JSON" | jq -r '.key_id')
            
            ENCRYPTED_VALUE=$(echo -n "$PASSWORD" | openssl pkeyutl -encrypt -pubin -inkey <(echo "$PUBLIC_KEY" | base64 -d) | base64 -w0)
            
            curl -X PUT -H "Authorization: token $PAT_TOKEN" \
              -H "Content-Type: application/json" \
              -d "{\"encrypted_value\":\"$ENCRYPTED_VALUE\",\"key_id\":\"$KEY_ID\"}" \
              https://api.github.com/repos/$GITHUB_REPOSITORY/actions/secrets/ENCRYPTION_PASSWORD
            
            curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_TOKEN/sendMessage" \
              -d chat_id="$TELEGRAM_CHAT_ID" \
              -d text="üîê New Password Generated: ||$PASSWORD||" \
              -d parse_mode="MarkdownV2"
            
            echo "ENCRYPTION_PASSWORD=$PASSWORD" >> $GITHUB_ENV
          fi

      - name: Deploy to Fly.io
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
          ENCRYPTION_PWD: ${{ secrets.ENCRYPTION_PASSWORD }}
        run: |
          flyctl deploy --app ${{ env.APP_NAME }} \
            --build-arg ENCRYPTION_PWD="$ENCRYPTION_PWD" \
            --build-arg TAILSCALE_AUTHKEY=$TAILSCALE_AUTHKEY \
            --remote-only \
            --verbose

      - name: Send Success Notification
        if: success()
        env:
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          DEPLOY_URL="https://${{ env.APP_NAME }}.fly.dev"
          MESSAGE="üöÄ Deployment Success%0A‚úÖ App: ${{ env.APP_NAME }}%0Aüîó URL: $DEPLOY_URL%0AüìÖ $(TZ='Asia/Jakarta' date +'%Y-%m-%d %H:%M:%S %Z')"
          
          # Send message with document
          curl -F document=@${{ env.ARTIFACT_PATH }} \
            -F caption="$MESSAGE" \
            "https://api.telegram.org/bot$TELEGRAM_TOKEN/sendDocument?chat_id=$TELEGRAM_CHAT_ID&parse_mode=Markdown"

      - name: Verify Deployment
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        run: |
          # Retry maksimal 3 kali dengan interval 15 detik
          for i in {1..3}; do
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://${{ env.APP_NAME }}.fly.dev/System/Info)
            if [ "$STATUS" -eq 200 ]; then
              echo "Health check passed!"
              exit 0
            fi
            echo "Attempt $i: Health check failed (Status: $STATUS)"
            sleep 15
          done
    
          echo "Deployment verification failed after 3 attempts" >&2
          exit 1

      - name: Debugging Info
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        if: failure()
        run: |
          echo "=== Service Status ==="
          flyctl status -a ${{ env.APP_NAME }}
    
          echo "=== Recent Logs ==="
          flyctl logs -a ${{ env.APP_NAME }} | tail -n 50
    
          echo "=== Volume Info ==="
          flyctl volumes list -a ${{ env.APP_NAME }}
    
          echo "=== Network Check ==="
          curl -v https://${{ env.APP_NAME }}.fly.dev/System/Info
   
      - name: Rollback on Failure
        if: failure()
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          # Dapatkan list deployment dalam format JSON
          DEPLOYMENTS_JSON=$(flyctl deploy list -a ${{ env.APP_NAME }} --json)
    
          # Ekstrak ID deployment terakhir yang sukses
          LAST_GOOD_DEPLOYMENT=$(echo $DEPLOYMENTS_JSON | jq -r '.[] | select(.Status == "complete") | .ID' | tail -n 1)
    
          if [ -z "$LAST_GOOD_DEPLOYMENT" ]; then
            echo "No previous successful deployment found"
            exit 1
          fi
    
          # Rollback ke deployment yang berhasil
          flyctl deploy rollback $LAST_GOOD_DEPLOYMENT -a ${{ env.APP_NAME }} -y
    
          # Dapatkan log error
          LOGS=$(flyctl logs -a ${{ env.APP_NAME }} | tail -n 50)
    
          # Format pesan error
          MESSAGE="‚ùå Deployment Failed%0Aüîç Logs: ${LOGS//$'\n'/'%0A'}%0AüîÑ Rollback to version: $LAST_GOOD_DEPLOYMENT"
    
          # Kirim notifikasi
          curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_TOKEN/sendMessage" \
            -d chat_id="$TELEGRAM_CHAT_ID" \
            -d text="$MESSAGE" \
            -d parse_mode="Markdown"
