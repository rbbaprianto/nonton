name: Deploy Nonton

on:
  push:
    branches: [main]

env:
  APP_NAME: "nonton"
  PRIMARY_REGION: "sin"

jobs:
  cleanup:
    runs-on: ubuntu-24.04
    permissions:
      actions: write
      contents: read
    steps:
      - uses: actions/github-script@v7
        with:
          script: |
            const { data: runs } = await github.rest.actions.listWorkflowRunsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: context.workflow,
              per_page: 100
            });
            
            const currentRunId = context.runId;
            const sortedRuns = runs.workflow_runs.sort((a, b) => b.id - a.id);
            const runsToDelete = sortedRuns.slice(5);
            
            for (const run of runsToDelete) {
              if (run.id !== currentRunId && run.status !== 'in_progress') {
                await github.rest.actions.deleteWorkflowRun({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  run_id: run.id
                });
              }
            }
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}

  deploy:
    needs: cleanup
    runs-on: ubuntu-24.04
    permissions:
      contents: read
      secrets: write
    steps:
      - uses: actions/checkout@v4

      - name: Setup Fly CLI
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Create App
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        run: |
          if ! flyctl apps list | grep -q "${{ env.APP_NAME }}"; then
            flyctl apps create ${{ env.APP_NAME }} --org personal
          fi
          echo "app = \"${{ env.APP_NAME}}\"" > fly.toml
          echo "primary_region = \"${{ env.PRIMARY_REGION}}\"" >> fly.toml

      - name: Generate Secrets
        id: secrets
        run: |
          if [ -z "${{ secrets.ENCRYPTION_PASSWORD }}" ]; then
            PASSWORD=$(openssl rand -hex 16)
            echo "ENCRYPTION_PASSWORD=$PASSWORD" >> $GITHUB_ENV
            echo "NEW_SECRETS=true" >> $GITHUB_OUTPUT
          fi

      - name: Save Secrets
        if: steps.secrets.outputs.NEW_SECRETS == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const { data: publicKey } = await github.rest.actions.getRepoPublicKey({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });

            const messageBytes = Buffer.from('${{ env.ENCRYPTION_PASSWORD }}');
            const keyBytes = Buffer.from(publicKey.key, 'base64');
            const encryptedBytes = sodium.seal(messageBytes, keyBytes);
            const encrypted = Buffer.from(encryptedBytes).toString('base64');

            await github.rest.actions.createOrUpdateRepoSecret({
              owner: context.repo.owner,
              repo: context.repo.repo,
              secret_name: 'ENCRYPTION_PASSWORD',
              encrypted_value: encrypted,
              key_id: publicKey.key_id,
            });
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}

      - name: Deploy
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
          ENCRYPTION_PWD: ${{ secrets.ENCRYPTION_PASSWORD }}
        run: |
          flyctl deploy --app ${{ env.APP_NAME }} \
            --build-arg ENCRYPTION_PWD="$ENCRYPTION_PWD" \
            --remote-only \
            --verbose